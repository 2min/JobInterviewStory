
Dialogues = {
    'd0': {
        type        : 'dialogue',
        text        : 'Hello, world!',
        emote       : 'talkHappy',
        end         : true
    },

    'd1': {
        type        : 'dialogue',
        text        : 'Do you want to go to lunch? I\'m hungry...',
        emote       : 'question',
        goTo        : 'c0',
        action      : function () {

        }
    },

    'c0': {
        type    : 'choice',
        emote   : 'think',
        choices : [
            {
                label       : 'Yes',
                goTo        : 'd2',
                action      : function () {

                }
            },

            {
                label       : 'No',
                goTo        : 'd3',
                action      : function () {

                }
            }
        ]
    },

    'd2': {
        type        : 'dialogue',
        text        : 'Alright!',
        emote       : 'happiness',
        end         : true,
        action      : function () {

        }
    },

    'd3': {
        type        : 'dialogue',
        text        : 'Awwwww!',
        emote       : 'sadness',
        end         : true,
        action      : function () {

        }
    }
}

Game = {
    activeNPC   : '',
    directions  : [
        'u',
        'd',
        'l',
        'r'
    ],
    fps         : 60,
    pressedKeys : [],

    /**
     *
     */
    calculateZindex: function (object) {
        var objectCollision = object.is('#player, .npc') ? object.find('#player-collision, .npc-collision') : object;

        object.css({
            zIndex: objectCollision.offset().top
        });
    },

    /**
     *
     */
    collisionCheck: function (object, direction) {
        for (var i = 0; i < $('.collision, .npc').length; i++) {
            var
                objectCollision     = object.is('#player, .npc') ? object.find('#player-collision, .npc-collision') : object,
                obstacle            = $('#player, .npc, .collision').not(object).eq(i),
                obstacleCollision   = obstacle.is('.npc') ? obstacle.find('.npc-collision') : obstacle,
                objectH             = objectCollision.outerHeight(),
                objectL             = parseFloat(object.css('left')),
                objectT             = parseFloat(object.css('top')) + parseFloat(objectCollision.css('top')),
                objectW             = object.outerWidth(),
                obstacleH           = obstacleCollision.outerHeight(),
                obstacleL           = parseFloat(obstacle.css('left')),
                obstacleT           = obstacle.is('.npc') ? parseFloat(obstacle.css('top')) + parseFloat(obstacleCollision.css('top')) : parseFloat(obstacleCollision.css('top')),
                obstacleW           = obstacle.outerWidth();

            switch (direction) {
                case 'u':
                    objectT -= 32;

                    break;

                case 'd':
                    objectT += 32;

                    break;

                case 'l':
                    objectL -= 32;

                    break;

                case 'r':
                    objectL += 32;

                    break;
            }

            var
                vX          = (objectL + (objectW / 2)) - (obstacleL + (obstacleW / 2)),
                vY          = (objectT + (objectH / 2)) - (obstacleT + (obstacleH / 2)),
                hWidths     = (objectW / 2) + (obstacleW / 2),
                hHeights    = (objectH / 2) + (obstacleH / 2);

            if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights) {
                // var
                //     dir = '',
                //     oX  = hWidths - Math.abs(vX),
                //     oY  = hHeights - Math.abs(vY);

                // if (oX >= oY) {
                //     if (vY > 0) {
                //         dir = 't';
                //     } else {
                //         dir = 'b';
                //     }
                // } else {
                //     if (vX > 0) {
                //         dir = 'l';
                //     } else {
                //         dir = 'r';
                //     }
                // }

                return {
                    state       : true,
                    obstacle    : obstacle
                };
            }
        }

        return {
            state       : false,
            obstacle    : null
        };
    },

    moveObject: function (object, direction, callback) {
        var
            animateOptions  = {},
            left            = parseFloat(object.css('left')),
            top             = parseFloat(object.css('top'));

        switch (direction) {
            case 'u':
                animateOptions = {
                    top: top - 32
                }

                break;

            case 'd':
                animateOptions = {
                    top: top + 32
                }

                break;

            case 'l':
                animateOptions = {
                    left: left - 32
                }

                break;

            case 'r':
                animateOptions = {
                    left: left + 32
                }

                break;

        }

        object.stop().animate(
            animateOptions,
            200,
            'linear',
            function () {
                Game.calculateZindex(object);

                if (callback) {
                    callback();
                }
            }
        );
    },

    player: {
        allowMoving : true,
        direction   : null
    },

    start: function () {
        setInterval(function () {
            Game.update();
        }, 1000 / Game.fps);

        $.get('../json/a01.json', function (data) {
            Stage.drawTiles(data.layers[0]);

            // Stage.drawCollisions(data.layers[1]);
        });

        // Stage.drawTiles([
        //     [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 51, 52, 52, 52, 52, 53, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        //     [1, 101, 102, 102, 102, 102, 103, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
        // ]);

        // Stage.drawObjects([
        //     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 245, 246, 247, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 265, 266, 267, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 285, 286, 287, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 305, 306, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 325, 326, 327, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 345, 346, 347, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        // ]);

        // Stage.drawCollisions([
        //     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        //     [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        // ]);

        $('#objects').append('<div id="player" tabindex="0" style="left: 64px; top: 312px;"><div id="player-collision"></div></div>');

        $('#player').trigger('focus');

        $.npc.create(
            'npc0',
            {
                height  : 40,
                width   : 32
            },
            {
                left    : 128,
                top     : 184
            },
            'd0'
        );

        $.npc.create(
            'npc1',
            {
                height  : 40,
                width   : 32
            },
            {
                left    : 160,
                top     : 216
            },
            'd1'
        );

        $('#npc0').npc('wander');
        $('#npc1').npc('wander');

        for (i = 0; i < $('#player, .npc, .object').length; i++) {
            Game.calculateZindex($('#player, .npc, .object').eq(i));
        }
    },

    /**
     *
     */
    update: function () {
        var
            player  = $('#player'),
            left    = parseFloat(player.css('left')),
            top     = parseFloat(player.css('top'));

        Game.player.speedMultiplier = 1;

        if (Game.pressedKeys[16]) { // Shift
            Game.player.speedMultiplier = 2;
        }

        if (Game.pressedKeys[13] || Game.pressedKeys[32]) { // Spacebar, Enter
            var collide = Game.collisionCheck(player, Game.player.direction);

            if (collide.state == true && !player.is(':animated')) {
                if (collide.obstacle.is('.npc')) {
                    collide.obstacle.npc('talk', collide.obstacle.data('npc')['dialogue']);
                }
            }
        }

        switch (true) {
            case ((Game.pressedKeys[87] || Game.pressedKeys[38]) && !player.is(':animated')) : // W, Up Arrow
                Game.player.direction = 'u';

                var collide = Game.collisionCheck(player, Game.player.direction);

                player.removeClass('down left right').addClass('walking up');

                if (collide.state == false && !player.is(':animated')) {
                    Game.moveObject(player, Game.player.direction);
                } else {
                    player.removeClass('walking');
                }

                break;

            case ((Game.pressedKeys[83] || Game.pressedKeys[40]) && !player.is(':animated')) : // S, Down Arrow
                Game.player.direction = 'd';

                var collide = Game.collisionCheck(player, Game.player.direction);

                player.removeClass('left right up').addClass('walking down');

                if (collide.state == false && !player.is(':animated')) {
                    Game.moveObject(player, Game.player.direction);
                } else {
                    player.removeClass('walking');
                }

                break;

            case ((Game.pressedKeys[65] || Game.pressedKeys[37]) && !player.is(':animated')) : // A, Left Arrow
                Game.player.direction = 'l';

                var collide = Game.collisionCheck(player, Game.player.direction);

                player.removeClass('down right up').addClass('walking left');

                if (collide.state == false && !player.is(':animated')) {
                    Game.moveObject(player, Game.player.direction);
                } else {
                    player.removeClass('walking');
                }

                break;

            case ((Game.pressedKeys[68] || Game.pressedKeys[39]) && !player.is(':animated')) : // D, Right Arrow
                Game.player.direction = 'r';

                var collide = Game.collisionCheck(player, Game.player.direction);

                player.removeClass('down left up').addClass('walking right');

                if (collide.state == false && !player.is(':animated')) {
                    Game.moveObject(player, Game.player.direction);
                } else {
                    player.removeClass('walking');
                }

                break;


            default:
                if (!player.is(':animated')) {
                    player.removeClass('walking');
                }

                break;
        }

        // Game.cameraCheck();
    }
};

/** PLAYER **/

$(document).on('keydown', '#player', function (event) {
    var key = event.keyCode || event.which;

    Game.pressedKeys[event.keyCode] = true;
});

$(document).on('keyup', '#player', function (event) {
    var key = event.keyCode || event.which;

    Game.pressedKeys[event.keyCode] = false;
});

/** START **/

$(document).on('ready', function () {
    Game.start();
});

/** MODAL WINDOWS **/

function Modal () {
    this.backgroundColor    = '#F8F8F8';
    this.id                 = 0;
    this.initiator          = '';

    /**
     *
     */
    this.create = function (id, size, position, content, initiator) {
        var modal = $('#' + id);

        if (modal.length === 0) {
            $('#modals').append('<div id="' + id + '" class="modal"><div class="modal-content" tabindex="0"></div></div>');
        } else {
            return false;
        }

        modal = $('#' + id);

        modal.data('modal', new Modal());

        modal.data('modal')['id']          = id;
        modal.data('modal')['initiator']   = initiator ? initiator : '';

        modal.css({
            backgroundColor : modal.data('modal')['backgroundColor'],
            left            : position.left + 'px',
            top             : position.top + 'px',
        });

        modal.animate({
            height  : size.height + 'px',
            width   : size.width + 'px',
            zIndex  : position.zIndex
        }, 200, function () {
            $(this).modal('populate', content);
        });
    },

    /**
     *
     */
    this.destroy = function (id, focus) {
        var
            modal = $('#' + id),
            modalContent = modal.find('.modal-content');

        modalContent.html('');

        modal.animate({
            height  : '0px',
            width   : '0px',
            zIndex  : '0'
        }, 200, function () {
            $(this).remove();
        });

        if (Game.activeNPC) {
            Game.activeNPC.npc('destroyEmote');
        }

        focus.trigger('focus');
    },

    /**
     *
     */
    this.option = function (option, value) {
        var
            element = $(this),
            data    = element.data('modal');

        if (typeof value === 'undefined') {
            return data[option];
        } else {
            data[option] = value;

            switch (option) {
                case 'backgroundColor':
                    element.css({
                        backgroundColor: value
                    });

                    break;
            }
        }
    },

    /**
     *
     */
    this.populate = function (content) {
        var
            emote           = content.emote,
            modal           = $(this),
            modalContent    = modal.find('.modal-content'),
            npc             = Game.activeNPC,
            type            = content.type;

        if (npc && emote) {
            npc.npc('emote', emote);
        }

        switch (type) {
            case 'choice':
                var choices = '<ul class="choice">';

                $.each(content.choices, function (index, value) {
                    choices += '<li tabindex="0">' + value.label + '</li>'
                });

                choices += '</ul>';

                modalContent.html(choices).find('li:first').trigger('focus');

                //
                modalContent.off().on('keyup', function (event) {
                    var choice  = $(document.activeElement),
                        key     = event.keyCode || event.which;

                    switch (key) {
                        case 13:
                        case 32: // Enter, Spacebar
                            var choice = content.choices[choice.index()];

                            if (choice.action) {
                                choice.action();
                            }

                            if (choice.goTo) {
                                return modal.modal('populate', Dialogues[choice.goTo]);
                            }

                            break;

                        case 38:
                        case 87: // Up Arrow
                            choice.prev('li').trigger('focus');

                            break;

                        case 40:
                        case 83: // Down Arrow
                            choice.next('li').trigger('focus');

                            break;
                    }
                });

                break;

            case 'dialogue':
                modalContent.html(content.text).trigger('focus');

                if (content.action) {
                    content.action();
                }

                //
                modalContent.off().on('keyup', function (event) {
                    var key = event.keyCode || event.which;

                    switch (key) {
                        case 13:
                        case 32: // Enter, Spacebar
                            if (content.goTo) {
                                modal.modal('populate', Dialogues[content.goTo]);

                                return;
                            } else if (content.end) {
                                modal.modal('destroy', modal.data('modal')['id'], $('#player'));

                                if (modal.data('modal')['initiator']) {
                                    modal.data('modal')['initiator'].data('npc')['wanderPause'] = false;
                                }

                                return;
                            }

                            break;
                    }
                });

                break;
        }
    }
}

$.fn.modal = function (option) {
    var
        element     = $(this[0]),
        otherArgs   = Array.prototype.slice.call(arguments, 1);

    if (typeof option !== 'undefined' && otherArgs.length > 0) {
        return element.data('modal')[option].apply(this[0], [].concat(otherArgs));
    }

    return element.data('modal');
}

$.modal = new Modal();


/** NPCS **/

function NPC () {
    this.dialogue       = 'd0';
    this.id             = 0;
    this.wanderInterval = '';
    this.wanderPause    = false;

    /**
     *
     */
    this.create = function (id, size, position, dialogue) {
        var npc = $('#' + id);

        if (npc.length === 0) {
            $('#objects').append('<div id="' + id + '" class="npc"><div class="npc-collision"></div></div>');
        } else {
            return false;
        }

        npc = $('#' + id);

        npc.data('npc', new NPC());

        npc.data('npc')['id']       = id;
        npc.data('npc')['dialogue'] = dialogue;

        npc.css({
            left    : position.left + 'px',
            top     : position.top + 'px',
            zIndex  : position.zIndex
        });
    },

    /**
     *
     */
    this.destroyEmote = function () {
        var npc = $(this);

        npc.find('.emote').animate({
            opacity : 0,
            top     : '-48px'
        }, 100, function () {
            $(this).remove();
        });
    }

    /**
     *
     */
    this.emote = function (emotion) {
        var npc     = $(this),
            emote   = npc.find('.emote');

        if (emote.length === 0) {
            npc.append('<div class="emote ' + emotion + '" style="opacity: 0; top: -48px"></div>');

            npc.find('.emote').animate({
                opacity : 1,
                top     : '-32px'
            }, 100);
        } else {
            npc.find('.emote').replaceWith('<div class="emote ' + emotion + '"></div>');
        }
    },

    /**
     *
     */
    this.move = function (direction) {
        var npc = $(this);

        switch (direction) {
            case 'd':
                Game.moveObject(npc, direction);

                break;

            case 'l':
                Game.moveObject(npc, direction);

                break;

            case 'r':
                Game.moveObject(npc, direction);

                break;

            case 'u':
                Game.moveObject(npc, direction);

                break;
        }
    },

    /**
     *
     */
    this.talk = function (dialogue) {
        var npc = $(this);

        Game.activeNPC = npc;

        npc.data('npc')['wanderPause'] = true;

        $.modal.create(
            'dialogue',
            {
                height  : 80,
                width   : 720
            },
            {
                left    : ($(window).width() - (720 + 32)) / 2,
                top     : 20
            },
            Dialogues[dialogue],
            npc
        );
    },

    /**
     *
     */
    this.wander = function () {
        var npc = $(this);

        clearInterval(this.wanderInterval);

        this.wanderInterval = setInterval(function () {
            var direction = Game.directions[Math.floor(Math.random() * Game.directions.length)];

            if (Math.random() < 0.5 || npc.data('npc')['wanderPause'] === true) {
                return;
            }

            var collide = Game.collisionCheck(npc, direction);

            if (collide.state == false && !npc.is(':animated')) {
                Game.moveObject(npc, direction);
            } else {

            }
        }, 1000);
    }
}

$.fn.npc = function (option) {
    var
        element     = $(this[0]),
        otherArgs   = Array.prototype.slice.call(arguments, 1);

    if (typeof option !== 'undefined' && otherArgs.length > 0) {
        return element.data('npc')[option].apply(this[0], [].concat(otherArgs));
    } else if (typeof option !== 'undefined') {
        return element.data('npc')[option].call (this[0]);
    } else {
        return element.data('npc');
    }
}

$.npc = new NPC();


Stage = {

    /**
     *
     */
    drawCollisions: function (collisions) {
        $.each(collisions.data, function (index, value) {
            var row = index;

            $.each(value, function (index, value) {
                if (value == 1) {
                    $('#collisions').append('<div class="collision" style="left: ' + index * 32 + 'px; top: ' + row * 32 + 'px"></div>');
                }
            });
        });
    },

    /**
     *
     */
    drawObjects: function (objects) {
        $.each(objects, function (index, value) {
            var row = index;

            $.each(value, function (index, value) {
                if (value > 0) {
                    $('#objects').append('<div class="object o' + value + '" style="left: ' + index * 32 + 'px; top: ' + row * 32 + 'px"></div>');
                }
            });
        });
    },

    /**
     *
     */
    drawTiles: function (tiles) {
        var counter = 0,
            height  = tiles.height,
            row     = 0,
            width   = tiles.width;

        $.each(tiles.data, function (index, value) {
            var x   = value % 88,
                y   = value % 88;

            console.log(x);
            console.log(y);

            $('#tiles').append('<div class="tile t' + value + '" style="background-position: -' + (x * 32) + 'px -' + (y * 32) + 'px; left: ' + counter * 32 + 'px; top: ' + row * 32 + 'px"></div>');

            counter += (index + 1) % width === 0 ? -counter : 1;
            row += (index + 1) % width === 0 ? 1 : 0;

            // var row = index;

            // $.each(value, function (index, value) {
            //     $('#tiles').append('<div class="tile t' + value + '" style="left: ' + index * 32 + 'px; top: ' + row * 32 + 'px"></div>');
            // });
        });
    }
}