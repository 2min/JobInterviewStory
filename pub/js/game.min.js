
Dialogues = {
    'd000': {
        type        : 'dialogue',
        text        : 'Hello, world!',
        emote       : 'talkHappy',
        end         : true
    },

    'd001': {
        type        : 'dialogue',
        text        : 'Do you want to go to lunch? I\'m hungry...',
        emote       : 'question',
        goTo        : 'c000'
    },

    'c000': {
        type    : 'choice',
        emote   : 'think',
        choices : [
            {
                label       : 'Yes',
                goTo        : 'd002'
            },

            {
                label       : 'No',
                goTo        : 'd003'
            }
        ]
    },

    'd002': {
        type        : 'dialogue',
        text        : 'Alright!',
        emote       : 'happiness',
        end         : true
    },

    'd003': {
        type        : 'dialogue',
        text        : 'Awwwww!',
        emote       : 'sadness',
        end         : true
    }
}

Game = {
    activeNPC       : '',
    areaObstacles   : '',
    currentArea     : 'a000',
    directions      : [
        'u',
        'd',
        'l',
        'r'
    ],
    fps             : 60,
    gridCellSize    : 32,
    pressedKeys     : [],
    prevArea        : 'a000',

    /**
     *
     */
    calculateZindex: function (object) {
        object.css({
            zIndex: object.offset().top
        });
    },

    /**
     *
     */
    checkButtons: function () {
        var
            player          = $('#player'),
            playerSprite    = $('#player-sprite');

        player.data('player')['speedMultiplier'] = 1;

        // Shift

        if (Game.pressedKeys[16]) {
            player.data('player')['speedMultiplier'] = 2;
        }

        // Spacebar, Enter

        if (Game.pressedKeys[13] || Game.pressedKeys[32]) {
            var collide = Game.checkCollision(player, player.data('player')['direction']);

            if (collide.state == true && player.data('player')['allowMove']) {
                if (collide.obstacle.is('.npc')) {
                    collide.obstacle.npc('talk', collide.obstacle.data('npc')['dialogue']);
                }
            }
        }

        switch (true) {

            // W, Up Arrow

            case ((Game.pressedKeys[87] || Game.pressedKeys[38]) && player.data('player')['allowMove']) :
                player.data('player')['direction'] = 'u';

                var collide = Game.checkCollision(player, player.data('player')['direction']);

                playerSprite.removeClass('down left right').addClass('walking up');

                if (collide.state == false && player.data('player')['allowMove']) {
                    player.data('player')['allowMove'] = false;

                    Game.moveObject(player, player.data('player')['direction'], function () {
                        player.data('player')['allowMove'] = true;
                    });

                    if (collide.doorway || collide.stairs) {
                        if (collide.stairs) {
                            player.player('useStairs', collide.direction);
                        }

                        Stage.init(collide.area);
                    }
                } else {
                    playerSprite.removeClass('walking');
                }

                break;

            // S, Down Arrow

            case ((Game.pressedKeys[83] || Game.pressedKeys[40]) && player.data('player')['allowMove']) :
                player.data('player')['direction'] = 'd';

                var collide = Game.checkCollision(player, player.data('player')['direction']);

                playerSprite.removeClass('left right up').addClass('walking down');

                if (collide.state == false && player.data('player')['allowMove']) {
                    player.data('player')['allowMove'] = false;

                    Game.moveObject(player, player.data('player')['direction'], function () {
                        player.data('player')['allowMove'] = true;
                    });

                    if (collide.doorway || collide.stairs) {
                        if (collide.stairs) {
                            player.player('useStairs', collide.direction);
                        }

                        Stage.init(collide.area);
                    }
                } else {
                    playerSprite.removeClass('walking');
                }

                break;

            // A, Left Arrow

            case ((Game.pressedKeys[65] || Game.pressedKeys[37]) && player.data('player')['allowMove']) :
                player.data('player')['direction'] = 'l';

                var collide = Game.checkCollision(player, player.data('player')['direction']);

                playerSprite.removeClass('down right up').addClass('walking left');

                if (collide.state == false && player.data('player')['allowMove']) {
                    player.data('player')['allowMove'] = false;

                    Game.moveObject(player, player.data('player')['direction'], function () {
                        player.data('player')['allowMove'] = true;
                    });

                    if (collide.doorway || collide.stairs) {
                        if (collide.stairs) {
                            player.player('useStairs', collide.direction);
                        }

                        Stage.init(collide.area);
                    }
                } else {
                    playerSprite.removeClass('walking');
                }

                break;

            // D, Right Arrow

            case ((Game.pressedKeys[68] || Game.pressedKeys[39]) && player.data('player')['allowMove']) :
                player.data('player')['direction'] = 'r';

                var collide = Game.checkCollision(player, player.data('player')['direction']);

                playerSprite.removeClass('down left up').addClass('walking right');

                if (collide.state == false && player.data('player')['allowMove']) {
                    player.data('player')['allowMove'] = false;

                    Game.moveObject(player, player.data('player')['direction'], function () {
                        player.data('player')['allowMove'] = true;
                    });

                    if (collide.doorway || collide.stairs) {
                        if (collide.stairs) {
                            player.player('useStairs', collide.direction);
                        }

                        Stage.init(collide.area);
                    }
                } else {
                    playerSprite.removeClass('walking');
                }

                break;


            default:
                if (player.data('player')['allowMove']) {
                    playerSprite.removeClass('walking');
                }

                break;
        }
    },

    /**
     *
     */
    checkCollision: function (object, direction) {
        var offsetL = 0,
            offsetT = 0;

        switch (direction) {
            case 'u':
                offsetT = -32;

                break;

            case 'd':
                offsetT = 32;

                break;

            case 'l':
                offsetL = -32;

                break;

            case 'r':
                offsetL = 32;

                break;
        }

        var
            objectPos   = object.position(),
            obstacle    = Game.areaObstacles.filter(function () {
                var obstaclePos = $(this).position();

                return obstaclePos.left == objectPos.left + offsetL && obstaclePos.top == (objectPos.top + offsetT);
            });

        if (obstacle.length === 0) {
            return {
                state: false,
            };
        }

        var
            objectPos       = object.position(),
            objectL         = objectPos.left + offsetL,
            objectT         = objectPos.top + offsetT,
            objectH         = object.height(),
            objectW         = object.width(),
            obstaclePos     = obstacle.position(),
            obstacleL       = obstaclePos.left,
            obstacleT       = obstaclePos.top,
            obstacleH       = obstacle.height(),
            obstacleW       = obstacle.width(),
            hWidths         = (objectW / 2) + (obstacleW / 2),
            hHeights        = (objectH / 2) + (obstacleH / 2),
            vX              = (objectL + (objectW / 2)) - (obstacleL + (obstacleW / 2)),
            vY              = (objectT + (objectH / 2)) - (obstacleT + (obstacleH / 2));

        if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights && obstacle.is(':not(.doorway, .stairs)')) {
            // var
            //     dir = '',
            //     oX  = hWidths - Math.abs(vX),
            //     oY  = hHeights - Math.abs(vY);

            // if (oX >= oY) {
            //     if (vY > 0) {
            //         dir = 't';
            //     } else {
            //         dir = 'b';
            //     }
            // } else {
            //     if (vX > 0) {
            //         dir = 'l';
            //     } else {
            //         dir = 'r';
            //     }
            // }

            return {
                state       : true,
                obstacle    : obstacle
            };
        }

        return {
            state       : false,
            obstacle    : obstacle,
            doorway     : obstacle.is('.doorway'),
            area        : obstacle.is('.doorway, .stairs') ? obstacle.attr('data-area') : '',
            stairs      : obstacle.is('.stairs'),
            direction   : obstacle.is('.stairs') ? obstacle.attr('data-direction') : ''
        };
    },

    /**
     *
     */
    moveObject: function (object, direction, callback) {
        var
            animateOptions  = {},
            objectPos       = object.position(),
            left            = objectPos.left,
            top             = objectPos.top;

        switch (direction) {
            case 'u':
                animateOptions = {
                    top: top - 32
                }

                break;

            case 'd':
                animateOptions = {
                    top: top + 32
                }

                break;

            case 'l':
                animateOptions = {
                    left: left - 32
                }

                break;

            case 'r':
                animateOptions = {
                    left: left + 32
                }

                break;

        }

        object.stop().animate(
            animateOptions,
            180,
            'linear',
            function () {
                Game.calculateZindex(object);

                if (callback) {
                    callback();
                }
            }
        );

        if (object.is('#player')) {
            Stage.scrollStage(direction);
        }
    },

    /**
     *
     */
    start: function () {
        setInterval(function () {
            Game.update();
        }, 1000 / Game.fps);

        Stage.init('a000');

        for (i = 0; i < $('#player, .npc, .object').length; i++) {
            Game.calculateZindex($('#player, .npc, .object').eq(i));
        }
    },

    /**
     *
     */
    update: function () {
        var player = $('#player');

        if (player.length > 0) { // Don't bother updating if there isn't a player
            Game.checkButtons();
        }
    }
};

/** PLAYER **/

function Player () {
    this.allowMove          = true;
    this.direction          = null;
    this.speedMultiplier    = 1;

    /**
     *
     */
    this.create = function (data) {
        var player;

        if (data.properties.prevArea === Game.prevArea) {
            $('#objects').append('<div id="player" tabindex="0" style="left: ' + data.x + 'px; top: ' + (data.y - 32) + 'px;"><div id="player-sprite"></div></div>');

            player = $('#player');

            player.data('player', new Player());

            player.trigger('focus');
        }
    },

    /**
     *
     */
    this.getCoordinates = function () {
        var player          = $(this),
            playerPosition  = player.position();

        return {
            'x': playerPosition.left / Game.gridCellSize,
            'y': playerPosition.top / Game.gridCellSize
        }
    }

    /**
     *
     */
    this.useStairs = function (direction, callback) {
        var player      = $(this),
            playerPos   = player.position(),
            offsetL     = 0,
            offsetT     = 0;

        switch (direction) {
            case 'dl':
                offsetL = -32;
                offsetT = 0;

                break;

            case 'dr':
                offsetL = 32;
                offsetT = 32;

                break;

            case 'ul':
                offsetL = -32;
                offsetT = -32;

                break;

            case 'ur':
                offsetL = 32;
                offsetT = -32;

                break;
        }

        player.stop().animate({
            left    : playerPos.left + offsetL,
            top     : playerPos.top + offsetT
        }, 180, 'linear');
    }
}

$.fn.player = function (option) {
    var
        element     = $(this[0]),
        otherArgs   = Array.prototype.slice.call(arguments, 1);

    if (typeof option !== 'undefined' && otherArgs.length > 0) {
        return element.data('player')[option].apply(this[0], [].concat(otherArgs));
    } else if (typeof option !== 'undefined') {
        return element.data('player')[option].call (this[0]);
    } else {
        return element.data('player');
    }
}

$.player = new Player();


//
$(document).on('keydown', '#player', function (event) {
    var key = event.keyCode || event.which;

    Game.pressedKeys[event.keyCode] = true;
});

//
$(document).on('keyup', '#player', function (event) {
    var key = event.keyCode || event.which;

    Game.pressedKeys[event.keyCode] = false;
});

/** START **/

//
$(document).on('ready', function () {
    Game.start();
});


/** MODAL WINDOWS **/

function Modal () {
    this.backgroundColor    = '#F8F8F8';
    this.id                 = 0;
    this.initiator          = '';

    /**
     *
     */
    this.create = function (id, size, position, content, initiator) {
        var modal = $('#' + id);

        if (modal.length === 0) {
            $('#modals').append('<div id="' + id + '" class="modal"><div class="modal-content" tabindex="0"></div></div>');
        } else {
            return false;
        }

        modal = $('#' + id);

        modal.data('modal', new Modal());

        modal.data('modal')['id']          = id;
        modal.data('modal')['initiator']   = initiator ? initiator : '';

        modal.css({
            backgroundColor : modal.data('modal')['backgroundColor'],
            left            : position.left + 'px',
            top             : position.top + 'px',
        });

        modal.animate({
            height  : size.height + 'px',
            width   : size.width + 'px',
            zIndex  : position.zIndex
        }, 200, function () {
            $(this).modal('populate', content);
        });
    },

    /**
     *
     */
    this.destroy = function (id, focus) {
        var
            modal = $('#' + id),
            modalContent = modal.find('.modal-content');

        modalContent.html('');

        modal.animate({
            height  : '0px',
            width   : '0px',
            zIndex  : '0'
        }, 200, function () {
            $(this).remove();
        });

        if (Game.activeNPC) {
            Game.activeNPC.npc('destroyEmote');
        }

        focus.trigger('focus');
    },

    /**
     *
     */
    this.option = function (option, value) {
        var
            element = $(this),
            data    = element.data('modal');

        if (typeof value === 'undefined') {
            return data[option];
        } else {
            data[option] = value;

            switch (option) {
                case 'backgroundColor':
                    element.css({
                        backgroundColor: value
                    });

                    break;
            }
        }
    },

    /**
     *
     */
    this.populate = function (content) {
        var
            emote           = content.emote,
            modal           = $(this),
            modalContent    = modal.find('.modal-content'),
            npc             = Game.activeNPC,
            type            = content.type;

        if (npc && emote) {
            npc.npc('emote', emote);
        }

        switch (type) {
            case 'choice':
                var choices = '<ul class="choice">';

                $.each(content.choices, function (index, value) {
                    choices += '<li tabindex="0">' + value.label + '</li>'
                });

                choices += '</ul>';

                modalContent.html(choices).find('li:first').trigger('focus');

                //
                modalContent.off().on('keyup', function (event) {
                    var choice  = $(document.activeElement),
                        key     = event.keyCode || event.which;

                    switch (key) {
                        case 13:
                        case 32: // Enter, Spacebar
                            var choice = content.choices[choice.index()];

                            if (choice.action) {
                                choice.action();
                            }

                            if (choice.goTo) {
                                return modal.modal('populate', Dialogues[choice.goTo]);
                            }

                            break;

                        case 38:
                        case 87: // Up Arrow
                            choice.prev('li').trigger('focus');

                            break;

                        case 40:
                        case 83: // Down Arrow
                            choice.next('li').trigger('focus');

                            break;
                    }
                });

                break;

            case 'dialogue':
                modalContent.html(content.text).trigger('focus');

                if (content.action) {
                    content.action();
                }

                //
                modalContent.off().on('keyup', function (event) {
                    var key = event.keyCode || event.which;

                    switch (key) {
                        case 13:
                        case 32: // Enter, Spacebar
                            if (content.goTo) {
                                modal.modal('populate', Dialogues[content.goTo]);

                                return;
                            } else if (content.end) {
                                modal.modal('destroy', modal.data('modal')['id'], $('#player'));

                                if (modal.data('modal')['initiator']) {
                                    modal.data('modal')['initiator'].data('npc')['wanderPause'] = false;
                                }

                                return;
                            }

                            break;
                    }
                });

                break;
        }
    }
}

$.fn.modal = function (option) {
    var
        element     = $(this[0]),
        otherArgs   = Array.prototype.slice.call(arguments, 1);

    if (typeof option !== 'undefined' && otherArgs.length > 0) {
        return element.data('modal')[option].apply(this[0], [].concat(otherArgs));
    }

    return element.data('modal');
}

$.modal = new Modal();


/** NPCS **/

function NPC () {
    this.dialogue       = 'd0';
    this.id             = 0;
    this.wanderInterval = '';
    this.wanderPause    = false;

    /**
     *
     */
    this.create = function (data) {
        var npc;

        $('#objects').append('<div id="' + data.name + '" class="npc"><div class="npc-sprite"></div></div>');

        npc = $('#' + data.name);

        npc.data('npc', new NPC());
        npc.data('npc')['id']       = data.name;
        npc.data('npc')['dialogue'] = data.properties.dialogue;

        npc.css({
            left    : data.x + 'px',
            top     : (data.y - 32) + 'px'
        });

        if (data.properties.wander) {
            npc.npc('wander');
        }
    },

    /**
     *
     */
    this.destroy = function () {
        var npc = $(this);

        clearInterval(npc.data('npc')['wanderInterval']);

        npc.remove();
    }

    /**
     *
     */
    this.destroyEmote = function () {
        var npc = $(this);

        npc.find('.emote').animate({
            opacity : 0,
            top     : '-48px'
        }, 100, function () {
            $(this).remove();
        });
    }

    /**
     *
     */
    this.emote = function (emotion) {
        var npc     = $(this),
            emote   = npc.find('.emote');

        if (emote.length === 0) {
            npc.append('<div class="emote ' + emotion + '" style="opacity: 0; top: -48px"></div>');

            npc.find('.emote').animate({
                opacity : 1,
                top     : '-32px'
            }, 100);
        } else {
            npc.find('.emote').replaceWith('<div class="emote ' + emotion + '"></div>');
        }
    },

    /**
     *
     */
    this.move = function (direction) {
        var npc = $(this);

        switch (direction) {
            case 'd':
                Game.moveObject(npc, direction);

                break;

            case 'l':
                Game.moveObject(npc, direction);

                break;

            case 'r':
                Game.moveObject(npc, direction);

                break;

            case 'u':
                Game.moveObject(npc, direction);

                break;
        }
    },

    /**
     *
     */
    this.talk = function (dialogue) {
        var npc = $(this);

        Game.activeNPC = npc;

        npc.data('npc')['wanderPause'] = true;

        $.modal.create(
            'dialogue',
            {
                height  : 80,
                width   : 720
            },
            {
                left    : ($(window).width() - (720 + 32)) / 2,
                top     : 20
            },
            Dialogues[dialogue],
            npc
        );
    },

    /**
     *
     */
    this.wander = function () {
        var npc = $(this);

        clearInterval(npc.data('npc')['wanderInterval']);

        npc.data('npc')['wanderInterval'] = setInterval(function () {
            var direction = Game.directions[Math.floor(Math.random() * Game.directions.length)];

            if (Math.random() < 0.5 || npc.data('npc')['wanderPause'] === true) {
                return;
            }

            var collide = Game.checkCollision(npc, direction);

            if (collide.state == false && !npc.is(':animated') && !collide.doorway) {
                Game.moveObject(npc, direction);
            }
        }, 1000);
    }
}

$.fn.npc = function (option) {
    var
        element     = $(this[0]),
        otherArgs   = Array.prototype.slice.call(arguments, 1);

    if (typeof option !== 'undefined' && otherArgs.length > 0) {
        return element.data('npc')[option].apply(this[0], [].concat(otherArgs));
    } else if (typeof option !== 'undefined') {
        return element.data('npc')[option].call (this[0]);
    } else {
        return element.data('npc');
    }
}

$.npc = new NPC();


Stage = {
    height  : 0,
    tileMap : {
        height  : 50,
        width   : 50
    },
    width   : 0,

    /**
     *
     */
    center: function () {
        var left    = 0,
            player  = $('#player'),
            stage   = $('#stage'),
            top     = 0;

        left    = ($(window).width() / 2) - (player.position().left + (player.width() / 2));
        top     = ($(window).height() / 2) - (player.position().top + ((player.height() + 8)/ 2));

        if (Stage.width <= $(window).width() && Stage.height <= $(window).height()) {
            left    = ($(window).width() - Stage.width) / 2;
            top     = ($(window).height() - Stage.height) / 2;
        }

        if (Stage.width > $(window).width() && stage.offset().left > 0 && player.position().left < $(window).width()
            && Stage.height > $(window).height() && stage.offset().top > 0 && player.position().top < $(window).height()) {
            left    = 0;
            top     = 0;
        }

        stage.css({
            height  : Stage.height,
            left    : left + 'px',
            top     : top + 'px',
            width   : Stage.width
        });
    },

    /**
     *
     */
    cleanup: function () {
        $('.npc').each(function (index, element) {
            $(element).npc('destroy');
        });

        $('#collisions').html('');
        $('#objects').html('');
        $('#tiles').html('');
    },

    /**
     *
     */
    drawCollisions: function (collisions) {
        var counter = 0,
            height  = collisions.height,
            row     = 0,
            width   = collisions.width;

        $.each(collisions.data, function (index, value) {
            if (value !== 0) { // 0 is empty, 2 is a collision
                $('#collisions').append('<div class="collision" style="left: ' + counter * Game.gridCellSize + 'px; top: ' + row * Game.gridCellSize + 'px"></div>');
            }

            counter += (index + 1) % width === 0 ? -counter : 1;
            row += (index + 1) % width === 0 ? 1 : 0;
        });
    },

    /**
     *
     */
    drawObjects: function (objects) {
        $.each(objects.objects, function (index, value) {
            switch (value.type) {
                case 'player':
                    $.player.create(value);

                    break;

                case 'npc':
                    $.npc.create(value);

                    break;

                case 'doorway':
                    $('#objects').append('<div id="' + value.name + '" class="object doorway" data-area="' + value.properties.area + '" style="left: ' + value.x + 'px; top: ' + (value.y - Game.gridCellSize) + 'px"></div>');

                    break;

                case 'stairs':
                    $('#objects').append('<div id="' + value.name + '" class="object stairs" data-area="' + value.properties.area + '" data-direction="' + value.properties.direction + '" style="left: ' + value.x + 'px; top: ' + (value.y - Game.gridCellSize) + 'px"></div>');

                    break;
            }
        });
    },

    /**
     *
     */
    drawTiles: function (tiles) {
        var counter = 0,
            height  = tiles.height,
            row     = 0,
            width   = tiles.width;

        $.each(tiles.data, function (index, value) {
            var y   = Math.ceil(value / Stage.tileMap.width),
                x   = (value - ((y - 1) * Stage.tileMap.width));

            if (value !== 0) { // 0 is empty, therefore don't draw it
                $('#tiles').append('<div class="tile t' + value + '" style="background-position: -' + ((x * Game.gridCellSize) - Game.gridCellSize) + 'px -' + ((y * Game.gridCellSize) - Game.gridCellSize) + 'px; left: ' + (counter * Game.gridCellSize) + 'px; top: ' + (row * Game.gridCellSize) + 'px"></div>');
            }

            counter += (index + 1) % width === 0 ? -counter : 1;
            row += (index + 1) % width === 0 ? 1 : 0;
        });
    },

    /**
     *
     */
    getTile: function (x, y) {

    },

    /**
     *
     */
    init: function (stage) {
        var transition = $('#transition');

        transition.animate({
            opacity: 1
        }, 200, function () {
            Stage.cleanup();

            $.ajax({
                cache       : false,
                dataType    : 'json',
                type        : 'GET',
                url         : '../json/'+ stage +'.json',
            }).done(function (data, textStatus, jqXHR) {
                Game.prevArea       = Game.currentArea;
                Game.currentArea    = stage;
                Stage.height    = data.height * Game.gridCellSize;
                Stage.width     = data.width * Game.gridCellSize;

                $.each(data.layers, function (index, value) {
                    var layer = value;

                    switch (true) {

                        // Collisions
                        case (layer.name == 'collisions') :
                            Stage.drawCollisions(layer);

                            break;

                        // Objects
                        case (layer.type == 'objectgroup') :
                            Stage.drawObjects(layer);

                            break;

                        // Tile Layer
                        default :
                            Stage.drawTiles(layer);

                            break;
                    }
                });

                Stage.center();

                Game.areaObstacles = $('#player, .npc, .collision, .doorway, .stairs');

                transition.animate({
                    opacity: 0
                }, 200);
            }).fail(function (jqXHR, textStatus, errorThrown) {

            }).always(function (data, textStatus, jqXHR) {

            });
        });
    },

    scrollStage: function (direction) {
        var player      = $('#player'),
            offset      = 0,
            scrollArea  = $('#scroll-area'),
            stage       = $('#stage'),
            stageL      = stage.position().left,
            stageT      = stage.position().top,
            windowH     = $(window).height(),
            windowW     = $(window).width();

        if ((Stage.width > windowW || Stage.height > windowH)) {
            switch (direction) {
                case 'u':
                    if ((player.offset().top + 24) < (windowH / 2) && stageT < 0) {
                        stage.stop().animate({
                            top: stageT + Game.gridCellSize + offset
                        }, 180, 'linear');
                    }

                    break;

                case 'd':
                    if ((player.offset().top + 24) > (windowH / 2)
                        && Math.abs(stageT - windowH) < Stage.height) {
                        stage.stop().animate({
                            top: stageT - Game.gridCellSize + offset
                        }, 180, 'linear');
                    }

                    break;

                case 'l':
                    if ((player.offset().left + 16) < (windowW / 2) && stageL < 0) {
                        stage.stop().animate({
                            left: stageL + Game.gridCellSize + offset
                        }, 180, 'linear');
                    }

                    break;

                case 'r':
                    if ((player.offset().left + 16) > (windowW / 2)
                        && Math.abs(stageL - windowW) < Stage.width) {
                        stage.stop().animate({
                            left: stageL - Game.gridCellSize + offset
                        }, 180, 'linear');
                    }

                    break;
            }
        }
    }
}